class Solution:
    def isLeaf(self, root):
        if not root.left and not root.right:
            return True
        return False
        
    def addLeft(self, root, res):
        curr= root.left
        while curr:
            if not self.isLeaf(curr):
                res.append(curr.data)
            if curr.left:
                curr= curr.left
            else:
                curr= curr.right
                
    def addRight(self, root, res):
        curr= root.right
        temp=[]
        while curr:
            if not self.isLeaf(curr):
                temp.append(curr.data)
            if curr.right:
                curr= curr.right
            else:
                curr= curr.left
                
        for i in range(len(temp)):
            val= temp.pop()
            res.append(val)
            
    def addLeaf(self, root, res):
        if self.isLeaf(root):
            res.append(root.data)
            return
        
        if root.left:
            self.addLeaf(root.left, res)
        if root.right:
            self.addLeaf(root.right, res)
        
    def printBoundaryView(self, root):
        res=[]
        if not root:
            return res
        if not self.isLeaf(root):         #will get added as leaf node when just one node
            res.append(root.data)
        self.addLeft(root, res)
        self.addLeaf(root,res)
        self.addRight(root, res)
        
        return res
